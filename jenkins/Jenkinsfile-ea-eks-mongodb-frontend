pipeline {
    agent {
        label 'ubuntu-jenkins'
    }

    environment {
        containerName = sh(script: 'echo ${JOB_NAME} | tr \'[:upper:]\' \'[:lower:]\' | tr \'_\' \'-\'', returnStdout: true).trim()
        // Extract container name from job name, convert to lowercase, and replace underscores with hyphens
        slackUrl = credentials('slack-webhook-url')
        imageName = "${containerName}:1.${env.BUILD_ID}"
    }

    stages {
        stage('Git repository deletion') {
            steps {
                sh "rm -rf /home/ubuntu/workspace/ea-eks-mongodb-frontend/ea-k8s"
            }
        }
        stage('Git repository clone') {
            steps {
                sh "git clone git@github.com:erdenayates/ea-k8s.git"
            }
        }
        stage('Kill container') {
            steps {
                sh "docker kill ${containerName} || true" // Ignore errors if container doesn't exist
            }
        }
        stage('Remove container') {
            steps {
                sh "docker rm ${containerName} || true" // Ignore errors if container doesn't exist
            }
        }
        stage('Build image') {
            steps {
                sh "docker build -t ${imageName} /home/ubuntu/workspace/ea-eks-mongodb-frontend/ea-k8s/mongodb-app/frontend"
            }
        }
        stage('Run container') {
            steps {
                sh "docker run -d -p 81:80 --name ${containerName} ${imageName}"
            }
        }
        stage('Git repository deletion after run') {
            steps {
                sh "rm -rf /home/ubuntu/workspace/ea-eks-mongodb-frontend/ea-k8s"
            }
        }
    }

    post {
        success {
            slackSend color: '#36a64f', message: "Container (${imageName}) update succeeded!", slackUrl: slackUrl
        }
        failure {
            slackSend color: '#ff0000', message: "Container (${imageName}) update failed!", slackUrl: slackUrl
        }
    }
}

def slackSend(def options = []) {
    def slackUrl = options.get('slackUrl', '')
    def color = options.get('color', '#36a64f')
    def message = options.get('message', '')
    
    sh """
        curl -X POST -H 'Content-type: application/json' --data '{
            \"attachments\": [
                {
                    \"color\": \"$color\",
                    \"text\": \"$message\"
                }
            ]
        }' $slackUrl
    """
}
